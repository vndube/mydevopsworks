BROKER SCHEMA com.icici.xpress_connect.ecollection.mh.ci.intimation.queryback



-- Perform business data validation.
CREATE FUNCTION genPerformBusinessDataValidation(IN refAPIRequest REFERENCE, INOUT refValidationResult REFERENCE) 
BEGIN
	-- Validate rest of the message fields.
	-- @@IXC.AutoGenerateESQL
END;

-- Map / Build API request body (data / payload).
-- [15-Apr-2020]: Introduced for injecting client HTTP headers.
CREATE FUNCTION genMapAPIRequest(IN refAPIRequest REFERENCE, INOUT refClientAPIRequest REFERENCE, 
																	  IN refAPIRequestHeader REFERENCE, INOUT refClientAPIRequestHeader REFERENCE)
BEGIN
	-- Uses API field map on Customer On-Boarding Portal to produce ESQL code.
	-- @@IXC.AutoGenerateESQL
	
	-- Code --
--	DECLARE chClientAPIType CHARACTER refClientAPIRequestHeader."IXC-Client-API-Type";
--	
--	IF chClientAPIType = API_TYPE_REST_JSON THEN
--		CALL mapAPIRequest_ACME(refAPIRequest, refClientAPIRequest, refAPIRequestHeader, refClientAPIRequestHeader);
--	ELSEIF  chClientAPIType = API_TYPE_REST_XML THEN
----		CALL mapAPIRequest_ACME_XML(refAPIRequest, refClientAPIRequest, refAPIRequestHeader, refClientAPIRequestHeader);
--	ELSEIF	(chClientAPIType = API_TYPE_WS_SOAP_V11)  OR 
--				(chClientAPIType = API_TYPE_WS_SOAP_V12) THEN
----		CALL mapAPIRequest_ACME_SOAP(refAPIRequest, refClientAPIRequest, refAPIRequestHeader, refClientAPIRequestHeader);
--	END IF;	
END;

-- [03-Jul-2020]: Message security (Checksum / Hashing & Encryption)
-- Use secureWSRequest for securing SOAP Web Service calls to the customer.
CREATE FUNCTION genSecureAPIRequest(IN refAPIRequest REFERENCE, INOUT refClientAPIRequest REFERENCE, 
																	  	  IN refAPIRequestHeader REFERENCE, INOUT refClientAPIRequestHeader REFERENCE,
																	  	  IN refMessageSecurityConfiguration REFERENCE)
BEGIN
	-- rest checksum --
	
	-- rest encryption --
-- CALL secureAPIRequest_ACME(refAPIRequest, refClientAPIRequest, refAPIRequestHeader, refClientAPIRequestHeader, refMessageSecurityConfiguration);

END;


-- [03-Jul-2020]: Message security (Checksum / Hashing & Encryption). 
-- Used for building the Web Services SOAP Header.
CREATE PROCEDURE genSecureWSRequest(IN refAPIRequest REFERENCE, INOUT refClientAPIRequest REFERENCE,  
																		  	IN refAPIRequestHeader REFERENCE, INOUT refClientAPIRequestHeader REFERENCE, 
																		  	INOUT refClientWSSOAPHeader REFERENCE,
																		  	IN refMessageSecurityConfiguration REFERENCE) 
BEGIN
	-- @@IXC.AutoGenerateESQL

	-- soap checksum --
	
	-- soap encryption --

END;


-- [20-Jun-2020]: User Authentication
-- Used for building the Web Services SOAP Header.
CREATE PROCEDURE genSecureWSRequestAuthenticate(IN refAPIRequest REFERENCE, IN refAPIRequestHeader REFERENCE, 
																			INOUT refClientWSSOAPHeader REFERENCE) 
BEGIN
	-- @@IXC.AutoGenerateESQL
        -- authentication soap-header --

END;

-- [20-Jan-2020]: ACME API : JSON representation.
-- [15-Apr-2020]: Introduced for injecting client HTTP headers.
CREATE FUNCTION mapAPIRequest_ACME(IN refAPIRequest REFERENCE, INOUT refClientAPIRequest REFERENCE, 
	IN refAPIRequestHeader REFERENCE, INOUT refClientAPIRequestHeader REFERENCE)
BEGIN
		IF CLIENT_API_AUTH_TYPE = 'Basic-Auth' THEN
			DECLARE policyList CHARACTER COALESCE(refClientAPIRequestHeader."enforced-policy-list", '');
			SET policyList = policyList || '|UserAuthentication';
			SET  refClientAPIRequestHeader."enforced-policy-list" = policyList;
			SET refClientAPIRequestHeader."policy-enforcement-indicator" = 'request-only';
		END IF;
		-- Uses API field map on Customer On-Boarding Portal to produce ESQL code.
		CALL com.icici.xpress_connect.common.api.defaultMapAPIRequest(refAPIRequest, refClientAPIRequest);
		SET refClientAPIRequest.*[] = refAPIRequest.*[];
		-- [22-Aug-2020]: Number format leading to checksum mismatch in the response.
		SET refClientAPIRequest.transaction_amount = CAST(refAPIRequest.transaction_amount AS DECIMAL);
		-- [14-Feb-2020]: API Downgraded for Profunds datatype issue.
		IF COALESCE(refAPIRequest.request_priority, '') <> '' THEN
			SET refClientAPIRequest.request_priority = CAST(refAPIRequest.request_priority AS INTEGER);
		END IF;
		IF COALESCE(refAPIRequest.resent_indicator, '') <> '' THEN
			SET refClientAPIRequest.resent_indicator = CAST(refAPIRequest.resent_indicator AS BOOLEAN);
		END IF;
		IF COALESCE(refAPIRequest.original_request_priority, '') <> '' THEN
			SET refClientAPIRequest.original_request_priority = CAST(refAPIRequest.original_request_priority AS INTEGER);
		END IF;
		IF COALESCE(refAPIRequest.test_indicator, '') <> '' THEN
			SET refClientAPIRequest.test_indicator = CAST(refAPIRequest.test_indicator AS BOOLEAN);
		END IF;
			
		SET refClientAPIRequest.api_version = NULL;	
END;


-- [03-Jul-2020]: Message security (Checksum / Hashing & Encryption)
CREATE FUNCTION secureAPIRequest_ACME(IN refAPIRequest REFERENCE, INOUT refClientAPIRequest REFERENCE, 
																	  					IN refAPIRequestHeader REFERENCE, INOUT refClientAPIRequestHeader REFERENCE,
																	  					IN refMessageSecurityConfiguration REFERENCE)
BEGIN

	-- Example 1: Checksum of message payload (business data) and passing it through the HTTP header.
	DECLARE chMessagePayload BLOB ASBITSTREAM (refClientAPIRequest, 546, 1208, '', '', '', FolderBitStream);

	IF CAST(refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_RESPONSE_CHECK AS BOOLEAN) THEN
		SET refClientAPIRequestHeader."policy-enforcement-indicator" = 'request-response';
	ELSE	
		SET refClientAPIRequestHeader."policy-enforcement-indicator" = 'request-only';
	END IF;
	
	IF CLIENT_API_MESSAGE_SECURITY_HASHING_TYPE = 'Message-Hashing' THEN
		DECLARE policyList CHARACTER COALESCE(refClientAPIRequestHeader."enforced-policy-list", '');
		SET policyList = policyList || '|IntegrityValidator';
		SET refClientAPIRequestHeader."enforced-policy-list" = policyList;
		
		SET refClientAPIRequestHeader."ACME-Message-Checksum" = 
				com.icici.xpress_connect.common.api.hash(CLIENT_API_MESSAGE_SECURITY_HASHING_ALGO, chMessagePayload);
		SET refClientAPIRequestHeader."ACME-Message-Checksum-Algo" = 	CLIENT_API_MESSAGE_SECURITY_HASHING_ALGO;
	
		-- Example 4: Checksum of select message fields (business data) and passing it through the message payload itself.
--		SET refClientAPIRequest.client_data_ext."ACME-Message-Checksum-Algo" 	=  CLIENT_API_MESSAGE_SECURITY_HASHING_ALGO;
--		SET refClientAPIRequest.client_data_ext."ACME-Message-Checksum" 				=  refClientAPIRequestHeader."ACME-Message-Checksum";
	END IF;	

	-- Encryption Headers
    DECLARE CONFIGRITY_HDR_SECURE_ENCODING						CONSTANT CHARACTER 'secure_encoding';
    DECLARE CONFIGRITY_HDR_SECRET_GENERATION_TYPE		CONSTANT CHARACTER 'secret_gen';
    
    DECLARE CONFIGRITY_HDR_SECURE_SECRET_KEY					CONSTANT CHARACTER 'secure_secret_key';
    DECLARE CONFIGRITY_HDR_SECRET_KEY_ALIAS 						CONSTANT CHARACTER 'secret_key_alias';

    DECLARE CONFIGRITY_HDR_PAYLOAD_CIPHER_ALGO			CONSTANT CHARACTER 'payload_cipher_algo';
    DECLARE CONFIGRITY_HDR_PAYLOAD_CIPHER_MODE			CONSTANT CHARACTER 'payload_cipher_mode';
    DECLARE CONFIGRITY_HDR_PAYLOAD_CIPHER_PADDING	CONSTANT CHARACTER 'payload_cipher_padding';
    DECLARE CONFIGRITY_HDR_PAYLOAD_CIPHER_IV					CONSTANT CHARACTER 'payload_cipher_iv';
    
    
    DECLARE CONFIGRITY_HDR_SECRET_CIPHER_ALGO					CONSTANT CHARACTER 'secret_cipher_algo';
    DECLARE CONFIGRITY_HDR_SECRET_CIPHER_MODE				CONSTANT CHARACTER 'secret_cipher_mode';
    DECLARE CONFIGRITY_HDR_SECRET_CIPHER_PADDING			CONSTANT CHARACTER 'secret_cipher_padding';
    DECLARE CONFIGRITY_HDR_SECRET_CIPHER_IV							CONSTANT CHARACTER 'secret_cipher_iv';
    
    DECLARE CONFIGRITY_HDR_PUBLIC_KEY_ALIAS 						CONSTANT CHARACTER 'public_key_alias';	

	IF CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_TYPE = MESSAGE_SECURITY_TYPE_MESSAGE_ENCRYPTION_FIELDS_ONLY THEN
		DECLARE policyList CHARACTER COALESCE(refClientAPIRequestHeader."enforced-policy-list", '');
		SET policyList = policyList || '|SimpleConfidentialityValidator';
		SET refClientAPIRequestHeader."enforced-policy-list" = policyList;
		-- Normally we would not require to set there HTTP headers when consuming the client API as these would be 
		-- pre-determined during on-boarding. However since our mock service is common and dynamic 
		-- (just by passing the cipher and key information through HTTP headers).
		
		SET refClientAPIRequestHeader.{ CONFIGRITY_HDR_PAYLOAD_CIPHER_ALGO 	}	
								= refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ALGO;
		SET refClientAPIRequestHeader.{ CONFIGRITY_HDR_PAYLOAD_CIPHER_MODE } 		
								= refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ALGO_MODE;
		SET refClientAPIRequestHeader.{ CONFIGRITY_HDR_PAYLOAD_CIPHER_PADDING } 
								= refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ALGO_PADDING;
		SET refClientAPIRequestHeader.{ CONFIGRITY_HDR_SECURE_ENCODING }
								= refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ENCODING;

		SET refClientAPIRequestHeader.{ CONFIGRITY_HDR_SECRET_GENERATION_TYPE }
								= 'STATIC';

		CALL com.icici.xpress_connect.common.api.encryptMessageFields(refClientAPIRequest, refMessageSecurityConfiguration);

		IF com.icici.xpress_connect.common.api.isAsymmetricEncryption(refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ALGO) THEN
			-- Asymmetric PUBLIC only
			SET refClientAPIRequestHeader.{ CONFIGRITY_HDR_PUBLIC_KEY_ALIAS }
									=	refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_PUBLIC_KEY_ALIAS_NAME;
		ELSE
			-- Symmetric SHARED SECRET only.
			SET refClientAPIRequestHeader.{ CONFIGRITY_HDR_SECRET_KEY_ALIAS }
									= refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_SECRET_KEY_ALIAS_NAME;
			SET refClientAPIRequestHeader.{ CONFIGRITY_HDR_PAYLOAD_CIPHER_IV }	
									= com.icici.xpress_connect.common.api.encode(
											com.icici.xpress_connect.common.api.decode(refMessageSecurityConfiguration.IV_HEX, 'hex'), 
											refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ENCODING);
		END IF;

		
	ELSEIF CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_TYPE = MESSAGE_SECURITY_TYPE_MESSAGE_ENCRYPTION THEN
		DECLARE policyList CHARACTER COALESCE(refClientAPIRequestHeader."enforced-policy-list", '');
		SET policyList = policyList || '|PayloadConfidentialityValidator';
		SET refClientAPIRequestHeader."enforced-policy-list" = policyList;
		
		CREATE FIELD refMessageSecurityConfiguration.encryption_result;
		DECLARE encryptionResult REFERENCE TO refMessageSecurityConfiguration.encryption_result;
		
		CALL com.icici.xpress_connect.common.api.encryptMessagePayload(refClientAPIRequest, refMessageSecurityConfiguration, encryptionResult);
		
		-- Result is
			-- encryptionResult.encryption_encoding
			-- encryptionResult.encryption_cipher
			-- encryptionResult.encryption_iv
			-- encryptionResult.encrypted_secret_key				-- If key is generated at RUNTIME
			-- encryptionResult.encrypted_payload
			
			-- ADD YOUR FINAL TRANSFORMATION CODE HERE.
			
			CREATE LASTCHILD  OF refAPIRequest NAME 'secure_request';
			DECLARE refSecureRequest REFERENCE TO refAPIRequest.secure_request;

			 SET refSecureRequest.secure_payload 						=	encryptionResult.encrypted_payload;
			 SET refSecureRequest.secure_encoding 					= encryptionResult.encryption_encoding;

			 SET refSecureRequest.security_config.secret_gen 						= refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_SECRET_KEYGEN;
			 SET refSecureRequest.security_config.secret_key_alias 				= refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_SECRET_KEY_ALIAS_NAME;
			 
			 IF refSecureRequest.security_config.secret_gen = 'RUNTIME' THEN
				 SET refSecureRequest.security_config.secret_key_alias 														= NULL;
				 SET refSecureRequest.security_config.secure_secret_key 													= encryptionResult.encrypted_secret_key;
				 SET refSecureRequest.security_config.secret_security_config.cipher_algo 					= refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_SECRETKEY_ENCRYPTION_ALGO;
				 SET refSecureRequest.security_config.secret_security_config.cipher_mode 					= refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_SECRETKEY_ENCRYPTION_ALGO_MODE;
				 SET refSecureRequest.security_config.secret_security_config.cipher_padding 				= refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_SECRETKEY_ENCRYPTION_ALGO_PADDING;
				 SET refSecureRequest.security_config.secret_security_config.cipher_iv 						= NULL;
				 SET refSecureRequest.security_config.secret_security_config.public_key_alias 			= refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_PUBLIC_KEY_ALIAS_NAME;
			 END IF;
			 
			 SET refSecureRequest.security_config.cipher_algo 					= refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ALGO;
			 SET refSecureRequest.security_config.cipher_mode 				= refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ALGO_MODE;
			 SET refSecureRequest.security_config.cipher_padding 			= refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ALGO_PADDING;
			 SET refSecureRequest.security_config.cipher_iv 						= encryptionResult.encryption_iv;
	
			SET refClientAPIRequest = refAPIRequest.secure_request;
			
			SET refAPIRequest.secure_request = NULL;
			SET encryptionResult = NULL;
			
	END IF;	
	
END;

